0001   
function void fibonacci(int n) 
              [0001, 0000] (0035,          PR_FUNCTION) {function}
              [0001, 0009] (0052,            TIPO_VOID) {void}
              [0001, 0014] (0001,                   ID) {fibonacci}
              [0001, 0023] (0020,             ABRE_PAR) {(}
              [0001, 0024] (0047,             TIPO_INT) {int}
              [0001, 0028] (0001,                   ID) {n}
              [0001, 0029] (0021,            FECHA_PAR) {)}
0002   
{
              [0002, 0000] (0024,           ABRE_CHAVE) {{}
0003   
	int n1 = 0, n2 = 1, n3;
              [0003, 0001] (0047,             TIPO_INT) {int}
              [0003, 0005] (0001,                   ID) {n1}
              [0003, 0008] (0017,               OP_ATR) {=}
              [0003, 0010] (0030,            CONST_INT) {0}
              [0003, 0011] (0027,                  SEP) {,}
              [0003, 0013] (0001,                   ID) {n2}
              [0003, 0016] (0017,               OP_ATR) {=}
              [0003, 0018] (0030,            CONST_INT) {1}
              [0003, 0019] (0027,                  SEP) {,}
              [0003, 0021] (0001,                   ID) {n3}
              [0003, 0023] (0026,             TERMINAL) {;}
0004   
	if(n == 0)
              [0004, 0001] (0041,                PR_IF) {if}
              [0004, 0003] (0020,             ABRE_PAR) {(}
              [0004, 0004] (0001,                   ID) {n}
              [0004, 0006] (0013,             OP_IGUAL) {==}
              [0004, 0009] (0030,            CONST_INT) {0}
              [0004, 0010] (0021,            FECHA_PAR) {)}
0005   
    {
              [0005, 0004] (0024,           ABRE_CHAVE) {{}
0006   
        write(n);
              [0006, 0008] (0039,             PR_WRITE) {write}
              [0006, 0013] (0020,             ABRE_PAR) {(}
              [0006, 0014] (0001,                   ID) {n}
              [0006, 0015] (0021,            FECHA_PAR) {)}
              [0006, 0016] (0026,             TERMINAL) {;}
0007   
	}
              [0007, 0001] (0025,          FECHA_CHAVE) {}}
0008   
    if(n == 1)
              [0008, 0004] (0041,                PR_IF) {if}
              [0008, 0006] (0020,             ABRE_PAR) {(}
              [0008, 0007] (0001,                   ID) {n}
              [0008, 0009] (0013,             OP_IGUAL) {==}
              [0008, 0012] (0030,            CONST_INT) {1}
              [0008, 0013] (0021,            FECHA_PAR) {)}
0009   
    {
              [0009, 0004] (0024,           ABRE_CHAVE) {{}
0010   
        write("0, ", n);
              [0010, 0008] (0039,             PR_WRITE) {write}
              [0010, 0013] (0020,             ABRE_PAR) {(}
              [0010, 0014] (0033,         CONST_STRING) {"0, "}
              [0010, 0019] (0027,                  SEP) {,}
              [0010, 0021] (0001,                   ID) {n}
              [0010, 0022] (0021,            FECHA_PAR) {)}
              [0010, 0023] (0026,             TERMINAL) {;}
0011   
	}
              [0011, 0001] (0025,          FECHA_CHAVE) {}}
0012   
    else
              [0012, 0004] (0042,              PR_ELSE) {else}
0013   
    {
              [0013, 0004] (0024,           ABRE_CHAVE) {{}
0014   
		char sep = ',';
              [0014, 0002] (0049,            TIPO_CHAR) {char}
              [0014, 0007] (0001,                   ID) {sep}
              [0014, 0011] (0017,               OP_ATR) {=}
              [0014, 0013] (0032,           CONST_CHAR) {','}
              [0014, 0016] (0026,             TERMINAL) {;}
0015   
		write("0, 1, ");
              [0015, 0002] (0039,             PR_WRITE) {write}
              [0015, 0007] (0020,             ABRE_PAR) {(}
              [0015, 0008] (0033,         CONST_STRING) {"0, 1, "}
              [0015, 0016] (0021,            FECHA_PAR) {)}
              [0015, 0017] (0026,             TERMINAL) {;}
0016   
		while(true)
              [0016, 0002] (0044,             PR_WHILE) {while}
              [0016, 0007] (0020,             ABRE_PAR) {(}
              [0016, 0008] (0034,           CONST_BOOL) {true}
              [0016, 0012] (0021,            FECHA_PAR) {)}
0017   
        {
              [0017, 0008] (0024,           ABRE_CHAVE) {{}
0018   
			n3 = n1 + n2;
              [0018, 0003] (0001,                   ID) {n3}
              [0018, 0006] (0017,               OP_ATR) {=}
              [0018, 0008] (0001,                   ID) {n1}
              [0018, 0011] (0002,               OP_ADD) {+}
              [0018, 0013] (0001,                   ID) {n2}
              [0018, 0015] (0026,             TERMINAL) {;}
0019   
			write(sep, " ", n3);
              [0019, 0003] (0039,             PR_WRITE) {write}
              [0019, 0008] (0020,             ABRE_PAR) {(}
              [0019, 0009] (0001,                   ID) {sep}
              [0019, 0012] (0027,                  SEP) {,}
              [0019, 0014] (0033,         CONST_STRING) {" "}
              [0019, 0017] (0027,                  SEP) {,}
              [0019, 0019] (0001,                   ID) {n3}
              [0019, 0021] (0021,            FECHA_PAR) {)}
              [0019, 0022] (0026,             TERMINAL) {;}
0020   
			if (n3 >= n)
              [0020, 0003] (0041,                PR_IF) {if}
              [0020, 0006] (0020,             ABRE_PAR) {(}
              [0020, 0007] (0001,                   ID) {n3}
              [0020, 0010] (0014,          OP_MAIOR_IG) {>=}
              [0020, 0013] (0001,                   ID) {n}
              [0020, 0014] (0021,            FECHA_PAR) {)}
0021   
            {
              [0021, 0012] (0024,           ABRE_CHAVE) {{}
0022   
				return;
              [0022, 0004] (0037,            PR_RETURN) {return}
              [0022, 0010] (0026,             TERMINAL) {;}
0023   
			}
              [0023, 0003] (0025,          FECHA_CHAVE) {}}
0024   
			n1 = n2;
              [0024, 0003] (0001,                   ID) {n1}
              [0024, 0006] (0017,               OP_ATR) {=}
              [0024, 0008] (0001,                   ID) {n2}
              [0024, 0010] (0026,             TERMINAL) {;}
0025   
			n2 = n3;
              [0025, 0003] (0001,                   ID) {n2}
              [0025, 0006] (0017,               OP_ATR) {=}
              [0025, 0008] (0001,                   ID) {n3}
              [0025, 0010] (0026,             TERMINAL) {;}
0026   
		}
              [0026, 0002] (0025,          FECHA_CHAVE) {}}
0027   
	}
              [0027, 0001] (0025,          FECHA_CHAVE) {}}
0028   
}
              [0028, 0000] (0025,          FECHA_CHAVE) {}}
0029   
function void main()
              [0029, 0000] (0035,          PR_FUNCTION) {function}
              [0029, 0009] (0052,            TIPO_VOID) {void}
              [0029, 0014] (0036,              PR_MAIN) {main}
              [0029, 0018] (0020,             ABRE_PAR) {(}
              [0029, 0019] (0021,            FECHA_PAR) {)}
0030   
{
              [0030, 0000] (0024,           ABRE_CHAVE) {{}
0031   
	int n;
              [0031, 0001] (0047,             TIPO_INT) {int}
              [0031, 0005] (0001,                   ID) {n}
              [0031, 0006] (0026,             TERMINAL) {;}
0032   
	input(n);
              [0032, 0001] (0038,             PR_INPUT) {input}
              [0032, 0006] (0020,             ABRE_PAR) {(}
              [0032, 0007] (0001,                   ID) {n}
              [0032, 0008] (0021,            FECHA_PAR) {)}
              [0032, 0009] (0026,             TERMINAL) {;}
0033   
	fibonacci(n);
              [0033, 0001] (0001,                   ID) {fibonacci}
              [0033, 0010] (0020,             ABRE_PAR) {(}
              [0033, 0011] (0001,                   ID) {n}
              [0033, 0012] (0021,            FECHA_PAR) {)}
              [0033, 0013] (0026,             TERMINAL) {;}
0034   
}
              [0034, 0000] (0025,          FECHA_CHAVE) {}}
0035   
              [0035, 0002] (0029,            EOF_TOKEN) {EOF}
